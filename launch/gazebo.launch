<?xml version="1.0"?>
<launch>
  <arg name="mav_name" default="firefly"/>
  <arg name="namespace" default="$(arg mav_name)"/>
  <arg name="world_name" default="basic2"/>
  <!-- <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" /> -->
  <arg name="tf_prefix" default="$(optenv ROS_NAMESPACE)"/>
  <arg name="x" default="0.0"/>
  <arg name="y" default="0.0"/>
  <arg name="z" default="0.1"/>
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="wait_to_record_bag" default="false"/>
  <arg name="enable_mavlink_interface" default="false"/>
  <arg name="enable_logging" default="false" />
  <arg name="debug" default="false"/>
  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->
  <arg name="verbose" default="false"/>
  <arg name="paused" default="true"/>
  <arg name="gazebo_gui" default="true"/>
  <arg name="initial_joint_positions" doc="Initial joint configuration of the robot"
       default=""/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>


  <!-- startup simulated world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gazebo_gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>

  <!-- send robot urdf to param server 
  <param name="robot_description" command="xacro  '$(find rotors_description)/urdf/firefly.xacro'" /> -->

  <!-- unpause only after loading robot model -->
  <arg name="unpause" value="$(eval '' if arg('paused') else '-unpause')" />
  <!-- push robot_description to factory and spawn robot in gazebo at the origin, change x,y,z arguments to spawn in a different position
  <arg name="world_pose" value="-x 0 -y 0 -z 0" />
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot $(arg unpause) $(arg world_pose) $(arg initial_joint_positions)"
    respawn="false" output="screen" /> -->
    
    <group ns="$(arg mav_name)">
   <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
    </include>

    <!-- Load joint controller parameters for Gazebo -->
    <rosparam file="$(find firefly_moveit_config)/config/gazebo_controllers.yaml" />
    <!-- Spawn Gazebo ROS controllers
    <node name="gazebo_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_controller" /> -->
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
        <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
        <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
        <remap from="odometry" to="odometry_sensor1/odometry" />
        <remap from="occupancy_grid_topic" to="global_mapper_ros/occupancy_grid" />
    </node>
    <node name="trajectory_publisher_from_moveit" pkg="rotors_gazebo" type="trajectory_publisher_from_moveit" output="screen">
        <remap from="motion_plan_request_topic" to="move_group/motion_plan_request" />
        <remap from="desired_trajectory_topic" to="move_group/display_planned_path" /> 
        <remap from="command_trajectory_topic" to="command/trajectory" />
    </node>
    
    <!-- Start Make Circle for testing -->
	<node name="rapid_traj_gen" pkg="rapid-quad-trajectories" type="publishTrajectories_test.py" output="screen">
    </node>
    <!-- <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/> -->
    <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" /> -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>


</launch>
